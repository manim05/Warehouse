

const newData = {
  aisles: [
      {"Aisle": "Aisle1", "rack_count": 10, "x": 87, "width": 534, "y": 601, "height": 59},
      {"Aisle": "Aisle7", "rack_count": 10, "x": 89, "width": 535, "y": 124, "height": 58},
      {"Aisle": "Aisle2", "rack_count": 10, "x": 87, "width": 535, "y": 444, "height": 58},
      {"Aisle": "Aisle3", "rack_count": 10, "x": 87, "width": 535, "y": 285, "height": 58},
      {"Aisle": "Aisle4", "rack_count": 10, "x": 1101, "width": 59, "y": 127, "height": 534},
      {"Aisle": "Aisle5", "rack_count": 10, "x": 948, "width": 59, "y": 127, "height": 534},
      {"Aisle": "Aisle6", "rack_count": 10, "x": 790, "width": 58, "y": 127, "height": 535}

  ],
  entireroom: {
      'width': 1333,
      'height': 769
  }
};


const convertAisleData = (inputJson) => {
  const originalData = inputJson.aisles;
  const entireroom = inputJson.entireroom
  const height = entireroom.height;
  const width = entireroom.width;

  const newData = {
      entireroom: {
          length: width + 400,
          width: height + 200,
          height:100
      },
      aisle: [],
      room: []
  };

  console.log(width+400,height+200, (width+400)/2, (height+200)/2)

  const parkingRoom = {
    'id' : 'Parking',
    'length' : 150,
    'width' : 350,
    'height': 100,
    // "position": [
    // - 800,
    //   0,
    //  -180,
    // ]
    "position": [
      - ((width+400) / 2 ) + 75,
      0,
      - ((height+200) / 2 ) /3 ,
    ]
    
  }

  newData.room.push(parkingRoom)

  originalData.forEach((aisle, index) => {
      const normalizedX = aisle.x - width / 2;
      const normalizedZ = aisle.y - height / 2;

      const newAisle = {
          aisleId: `A${String(index + 1).padStart(2, '0')}`,
          bayCnt: 6,
          position: [
              normalizedX,
              0,
              normalizedZ
          ],
          rowCnt: aisle.rack_count,
          rowwidth: aisle.height / aisle.rack_count,
          rowLength: aisle.width,
          rowHeight: 100,
          tierCnt: 4
      };

      newData.aisle.push(newAisle);
  });

  return newData;
};

const newJsonData = convertAisleData(newData);
console.log(newJsonData);


function App() {
  return (
    <Router>
      <Routes>
        <Route path="/tvm" element={<AisleRoomTV data={newJsonData} />} />
        <Route path="/nr" element={ <NewRobot />} />
      </Routes>
    </Router>
  );
}



const findNearAisles = (robotPosition, aisles, minDistanceThreshold, maxNearbyAisles) => {
  const nearAisleIds = [];

  for (const aisle of aisles) {
    const { aisleId, position, rowCnt, rowwidth, rowLength } = aisle;
    
    const rowCount = rowCnt;
    const aisleWidth = rowwidth * rowCount;
    const aisleLength = rowLength;

    const topLeftX = position[0];
    const topLeftZ = position[2];
    const bottomRightX = position[0] + aisleLength;
    const bottomRightZ = position[2] + aisleWidth;

    // Check if robot is within the boundaries of the aisle
    if (
      robotPosition.x >= topLeftX - minDistanceThreshold/2 &&
      robotPosition.x <= bottomRightX + minDistanceThreshold/2 &&
      robotPosition.z >= topLeftZ - minDistanceThreshold/2 &&
      robotPosition.z <= bottomRightZ + minDistanceThreshold/2
    ) {
      nearAisleIds.push(aisleId);
      if (nearAisleIds.length >= maxNearbyAisles) {
        break; 
      }
    }
  }

  return nearAisleIds;
};







const aislePosition = (aisles) => {
  const aislePositions = []; 

  for (const aisle of aisles) {
    const currentAisle = aisle;
    const id = aisle.aisleId;
    const rowCount = currentAisle.rowCnt;
    const aisleWidth = currentAisle.rowwidth * rowCount;
    const aisleLength = currentAisle.rowLength;
    const position = currentAisle.position;

    aislePositions.push([id,position[0], position[2], position[0] + aisleLength, position[2] + aisleWidth]);
  }

  return aislePositions;
}












/// works fine

const AisleRoomTV = (props) => {

  const jsonData = props.data;
  const { aisle, entireroom, room, robot } = jsonData;
  const { length, width, height } = entireroom;
 
  const controls = useRef();
  const [robotPositions, setRobotPositions] = useState({}); // Adjusted to handle multiple robots
 
  useEffect(() => {
     console.log(aisle);
  }, []);
 
  const handleZoom = () => {
     const camera = controls.current.object;
    //  console.log("Camera Rotation:", camera.rotation.toArray());
  };
 
  const updateRobotPosition = (robotId, position) => {
     setRobotPositions(prevPositions => ({
       ...prevPositions,
       [robotId]: {
         position,
         nearAisleIds: findNearAisles(position, jsonData.aisle, 200, 4) // Example: minDistanceThreshold = 200, maxNearbyAisles = 3
       }
     }));
  };
 
  return (
     <div style={{ position: 'relative', height: '100vh', backgroundImage: 'url(bgImage.jpg)' }}>
       <Canvas style={{
         width: '100%',
         height: '100vh',
         background: 'linear-gradient(to bottom, rgb(10, 10, 50) 0%,rgb(60, 10, 60) 100%)',
         verticalAlign: 'middle'
       }}>
         <ambientLight />
         <PerspectiveCamera
           makeDefault
           position={[0.0029850420235565164, 954.4672658601626, 6.835763277458009]}
           rotation={[-1.5636345867838892, 0.0000031273628530415463, 0.0004366689074517221]}
           fov={70}
         />
         <OrbitControls
           enableDamping={false}
           ref={controls}
           initialZoom={1000}
           maxPolarAngle={ Math.PI / 2}
           enableZoom={true}
           maxDistance={1020}
           zoomToCursor={true}
           onChange={handleZoom}
           minDistance={-100}
         />
 
         <EntireRoom position={[0, 0, 0]} length={length} width={width} height={height} />
         {aisle.map((aisle, index) => (
           <Aisle
             key={index}
             aisleId={index}
             bayCnt={aisle.bayCnt}
             position={aisle.position}
             rowCnt={aisle.rowCnt}
             rowwidth={aisle.rowwidth}
             rowLength={aisle.rowLength}
             rowHeight={aisle.rowHeight}
             tierCnt={aisle.tierCnt}
           />
         ))}
         {room && room.length > 0 && room.map((room) => (
           <Room
             key={room.id}
             position={room.position}
             length={room.length}
             width={room.width}
             height={room.height}
           />
         ))}
 
         {robot && robot.length > 0 && robot.map((robot) => (
           <Robot key={robot.robotId} robot={robot} onPositionUpdate={(position) => updateRobotPosition(robot.robotId, position)} />
         ))}
       </Canvas>
 



      {/* UI for displaying all position information in a single div */}
      {/* <div style={{ position: 'absolute', bottom: 0, left: 200, backgroundColor: 'rgba(255, 255, 255, 0.8)', padding: '10px' }}>
        {Object.entries(robotPositions).map(([robotId, { position }]) => (
          <div key={robotId}>
            <strong>Robot {robotId} Position:</strong> X: {position.x.toFixed(2)}, Y: {position.y.toFixed(2)}, Z: {position.z.toFixed(2)}
          </div>
        ))}
      </div> */}

      {/* UI for displaying all near aisles information in a single div */}
      {/* <div style={{ position: 'absolute', bottom: 0, left: 800, backgroundColor: 'rgba(255, 255, 255, 0.8)', padding: '10px' }}>
        {Object.entries(robotPositions).map(([robotId, { nearAisleIds }]) => (
          <div key={robotId}>
            <strong>Robot {robotId} Near Aisles:</strong> {nearAisleIds.join(', ')}
          </div>
        ))}
      </div> */}




       {/* UI for displaying robot positions */}
       {robot && robot.length > 0 && (
        <div style={{ position: 'absolute', bottom: 0, left: 200, backgroundColor: 'rgba(255, 255, 255, 0.8)', padding: '10px' }}>
          {Object.entries(robotPositions).map(([robotId, { position }]) => (
            <div key={robotId}>
              <strong>Robot {robotId} Position:</strong> X: {position.x.toFixed(2)}, Y: {position.y.toFixed(2)}, Z: {position.z.toFixed(2)}
            </div>
          ))}
        </div>
      )}

      {/* UI for displaying near aisles */}
      {robot && robot.length > 0 && (
        <div style={{ position: 'absolute', bottom: 0, left: 800, backgroundColor: 'rgba(255, 255, 255, 0.8)', padding: '10px' }}>
          {Object.entries(robotPositions).map(([robotId, { nearAisleIds }]) => (
            <div key={robotId}>
              <strong>Robot {robotId} Near Aisles:</strong> {nearAisleIds.join(', ')}
            </div>
          ))}
        </div>
      )}

     </div>
  );
 };
 
 export default AisleRoomTV;



import React from 'react';
import WarehouseRack from './WarehouseRack';

const Aisle = ({ aisleId, bayCnt, position, rowCnt, rowwidth, rowLength , rowHeight = 30, tierCnt }) => {
    
  const [x, y, z] = position;
  const shelfThickness = 0.1;

  const rackPositions = Array.from({ length: rowCnt  }, (_, index) => {
    const rackZ = z + index * (rowwidth + shelfThickness*0.2 )  ;
    return [x, y, rackZ];
  });

  return (
    <>
      {rackPositions.map((rackPosition,index) => (
        <WarehouseRack 
          key={`aisle_${aisleId}_rack${index}`}
          position={rackPosition}
          numShelves={tierCnt} 
          height={rowHeight}
          width={rowLength}
          length={rowwidth}
          bayCnt = {bayCnt}
        />
      ))}
    </>
  );
};

export default Aisle;


import React from 'react';
import { Box , Text} from '@react-three/drei';

const WarehouseRack = ({ position, height  ,width , length, numShelves}) => {

  const [x, y, z] = position;

  position = [x+length/2,y,z+width/2]

  const shelfWidth = width; 
  const rackLength = length;
  const shelfThickness = 0.1;
  const rackPartition = 0.1 ;
  const brownColor = '#8B4513'; 
  const metalColor = '#F1EF99'; 
  const sideColor = '#996633'; 
  const backColor = '#663300'; 

  const shelfPositions = [
    { side: "left", position: [0, 0, -rackLength/2], args: [shelfWidth -0.05, height, rackPartition] , color : sideColor },
    { side: "right", position: [0, 0, rackLength/2] , args: [shelfWidth -0.05, height, rackPartition], color : sideColor },
    { side: "center", position: [0, 0, 0] , args: [shelfThickness, height, rackLength], color : brownColor },
    { side: 'topShelf', position: [0, height/2, 0], args: [shelfWidth , shelfThickness, rackLength], color: backColor },
    { side: 'bottomShelf',position: [0, -height / 2, 0], args: [shelfWidth , 0.2, rackLength], color: backColor }

  ];


  const startRange = -height/2;
  const endRange = height/2;
  const numPoints = numShelves+1;

  const resultArray = Array.from({ length: numPoints }, (_, index) => startRange + index * ((endRange - startRange) / (numPoints - 1)));


  for (let i = 1; i < numShelves; i++) {
    shelfPositions.push({
      position: [0, resultArray[i], 0],  
      args: [shelfWidth-0.1, shelfThickness, rackLength],
      side: `Shelf ${i + 1}`,
      color: metalColor
    });
  }

  return (
    <group position={position} >
      {shelfPositions.map((shelf) => (
        <Box key={shelf.side} position={shelf.position} args={shelf.args}>
          <meshStandardMaterial color={shelf.color} />
        </Box>
      ))}
      {/* <Text position={[0, height / 2 + 5, -0.2]} 
            fontSize={7} anchorX="center" anchorY="middle" material-color="red" >
        {`X: ${position[0].toFixed(2)}, Z: ${position[2].toFixed(2)}`}
      </Text> */}

    </group>
  );

};

export default WarehouseRack;



















