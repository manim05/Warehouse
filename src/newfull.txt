/// Robot
const Robot = ({ robot, onPositionUpdate }) => {
    const { robotId, robotName, coordinates, rheight, rwidth } = robot;
    const obj = useLoader(OBJLoader, 'mani.obj');
    const [currentPositionIndex, setCurrentPositionIndex] = useState(0);
    const [position, setPosition] = useState(coordinates[0]);
  
    useEffect(() => {
      const interval = setInterval(() => {
        if (currentPositionIndex < coordinates.length - 1) {
          setCurrentPositionIndex((prevIndex) => prevIndex + 1);
        } else {
          clearInterval(interval);
        }
      }, 15000);
  
      return () => {
        clearInterval(interval);
      };
    }, [coordinates, currentPositionIndex]);

  
    useEffect(() => {
      if (currentPositionIndex < coordinates.length ) {
        console.log(robotId,currentPositionIndex,coordinates[currentPositionIndex],coordinates[currentPositionIndex+1])
        const start = {
          x: parseInt(coordinates[currentPositionIndex].x),
          y: parseInt(coordinates[currentPositionIndex].y),
          z: parseInt(coordinates[currentPositionIndex].z),
        };



        const end = currentPositionIndex < coordinates.length - 1 ? {
          x: parseInt(coordinates[currentPositionIndex + 1].x),
          y: parseInt(coordinates[currentPositionIndex + 1].y),
          z: parseInt(coordinates[currentPositionIndex + 1].z),
        } : start; // If there's no next coordinate, use the current position as the end
  
        const stepSizeX = parseInt(coordinates[currentPositionIndex].rSpeed) || 1;
        const stepSizeY = parseInt(coordinates[currentPositionIndex].rSpeed) || 1;
        const stepSizeZ = parseInt(coordinates[currentPositionIndex].rSpeed) || 1;
  
        let currentX = start.x;
        let currentY = start.y;
        let currentZ = start.z;
  
        const moveRobot = () => {
          const deltaX = end.x - currentX;
          const deltaY = end.y - currentY;
          const deltaZ = end.z - currentZ;
  
          if (Math.abs(deltaX) > stepSizeX) {
            currentX += (deltaX > 0 ? stepSizeX : -stepSizeX);
          } else {
            currentX = end.x;
          }
  
          if (Math.abs(deltaY) > stepSizeY) {
            currentY += (deltaY > 0 ? stepSizeY : -stepSizeY);
          } else {
            currentY = end.y;
          }
  
          if (Math.abs(deltaZ) > stepSizeZ) {
            currentZ += (deltaZ > 0 ? stepSizeZ : -stepSizeZ);
          } else {
            currentZ = end.z;
          }
  
          setPosition({ x: currentX, y: currentY, z: currentZ });
          onPositionUpdate({ x: currentX, y: currentY, z: currentZ });
  
          if (currentX === end.x && currentY === end.y && currentZ === end.z) {
            clearInterval(moveInterval);
            if (currentPositionIndex < coordinates.length - 1) {
              setCurrentPositionIndex((prevIndex) => prevIndex + 1);
            }
          }
        };
  
        const moveInterval = setInterval(moveRobot, 16);
  
        return () => {
          clearInterval(moveInterval);
        };
      }
    }, [coordinates, currentPositionIndex]);
  
    const length = rwidth;
    const height = rheight;
    const robotColor = 'black';
  
    return (
      <Box
        position={[position.x, position.y, position.z]}
        args={[length, height * 2, length]}
        material-color={robotColor} 
      />
    //   <primitive object={obj} position={[position.x, position.y - 10, position.z]} scale={[scale, scale, scale]}/>
    );
  };
  



  const findNearAisles = (robotPosition, aisles, minDistanceThreshold, maxNearbyAisles) => {
    const nearAisleIds = [];
  
    for (const aisle of aisles) {
      const { aisleId, position, rowCnt, rowwidth, rowLength } = aisle;
      
      const rowCount = rowCnt;
      const aisleWidth = rowwidth * rowCount;
      const aisleLength = rowLength;
  
      const topLeftX = position[0];
      const topLeftZ = position[2];
      const bottomRightX = position[0] + aisleLength;
      const bottomRightZ = position[2] + aisleWidth;
  
      // Check if robot is within the boundaries of the aisle
      if (
        robotPosition.x >= topLeftX - minDistanceThreshold/2 &&
        robotPosition.x <= bottomRightX + minDistanceThreshold/2 &&
        robotPosition.z >= topLeftZ - minDistanceThreshold/2 &&
        robotPosition.z <= bottomRightZ + minDistanceThreshold/2
      ) {
        nearAisleIds.push(aisleId);
        if (nearAisleIds.length >= maxNearbyAisles) {
          break; // Exit loop if max nearby aisles reached
        }
      }
    }
  
    return nearAisleIds;
  };
  




  const aislePosition = (aisles) => {
    const aislePositions = []; // Initialize an empty array
  
    for (const aisle of aisles) {
      const currentAisle = aisle;
      const id = aisle.aisleId;
      const rowCount = currentAisle.rowCnt;
      const aisleWidth = currentAisle.rowwidth * rowCount;
      const aisleLength = currentAisle.rowLength;
      const position = currentAisle.position;
  
      aislePositions.push([id,position[0], position[2], position[0] + aisleLength, position[2] + aisleWidth]);
    }
  
    return aislePositions;
  }
  
  




  const AisleRoom = (props) => {
    const jsonData = props.data;
    const { aisle, entireroom, room, robot } = jsonData;
    const { length, width, height } = entireroom;
   
    const controls = useRef();
    const [robotPositions, setRobotPositions] = useState({}); // Adjusted to handle multiple robots
   
    useEffect(() => {
       console.log(aisle);
    }, []);
   
    const handleZoom = () => {
       const camera = controls.current.object;
       console.log("Camera Rotation:", camera.rotation.toArray());
    };
   
    const updateRobotPosition = (robotId, position) => {
       setRobotPositions(prevPositions => ({
         ...prevPositions,
         [robotId]: {
           position,
           nearAisleIds: findNearAisles(position, jsonData.aisle, 200, 4) // Example: minDistanceThreshold = 200, maxNearbyAisles = 3
         }
       }));
    };
   
    return (
       <div style={{ position: 'relative', height: '100vh', backgroundImage: 'url(bgImage.jpg)' }}>
         <Canvas style={{
           width: '100%',
           height: '100vh',
           background: 'linear-gradient(to bottom, rgb(10, 10, 50) 0%,rgb(60, 10, 60) 100%)',
           verticalAlign: 'middle'
         }}>
           <ambientLight />
           <PerspectiveCamera
             makeDefault
             position={[0.0029850420235565164, 954.4672658601626, 6.835763277458009]}
             rotation={[-1.5636345867838892, 0.0000031273628530415463, 0.0004366689074517221]}
             fov={70}
           />
           <OrbitControls
             enableDamping={false}
             ref={controls}
             initialZoom={1000}
             maxPolarAngle={Math.PI / 2.5}
             enableZoom={true}
             maxDistance={1020}
             zoomToCursor={true}
             onChange={handleZoom}
             minDistance={-100}
           />
   
           <EntireRoom position={[0, 0, 0]} length={length} width={width} height={height} />
           {aisle.map((aisle, index) => (
             <Aisle
               key={index}
               aisleId={index}
               bayCnt={aisle.bayCnt}
               position={aisle.position}
               rowCnt={aisle.rowCnt}
               rowwidth={aisle.rowwidth}
               rowLength={aisle.rowLength}
               rowHeight={aisle.rowHeight}
               tierCnt={aisle.tierCnt}
             />
           ))}
           {room.map((room) => (
             <Room
               key={room.id}
               position={room.position}
               length={room.length}
               width={room.width}
               height={room.height}
             />
           ))}
   
           {robot.map((robot) => (
             <Robot key={robot.robotId} robot={robot} onPositionUpdate={(position) => updateRobotPosition(robot.robotId, position)} />
           ))}
         </Canvas>
   
  
  
  
        {/* UI for displaying all position information in a single div */}
        <div style={{ position: 'absolute', bottom: 0, left: 200, backgroundColor: 'rgba(255, 255, 255, 0.8)', padding: '10px' }}>
          {Object.entries(robotPositions).map(([robotId, { position }]) => (
            <div key={robotId}>
              <strong>Robot {robotId} Position:</strong> X: {position.x.toFixed(2)}, Y: {position.y.toFixed(2)}, Z: {position.z.toFixed(2)}
            </div>
          ))}
        </div>
  
        {/* UI for displaying all near aisles information in a single div */}
        <div style={{ position: 'absolute', bottom: 0, left: 800, backgroundColor: 'rgba(255, 255, 255, 0.8)', padding: '10px' }}>
          {Object.entries(robotPositions).map(([robotId, { nearAisleIds }]) => (
            <div key={robotId}>
              <strong>Robot {robotId} Near Aisles:</strong> {nearAisleIds.join(', ')}
            </div>
          ))}
        </div>
  
       </div>
    );
   };
   
   export default AisleRoom;
  
  

   import React from 'react';
   import { Box , Text} from '@react-three/drei';
   
   const EntireRoom = ({ length, width, height}) => {
     const halfLength = length / 2;
     const halfwidth = width / 2;
     const floorColor = '#cccccc' ;
   
     return (
       <>
         {/* Back Wall */}
         <Box position={[0, 0 - 0.3, -halfwidth]} args={[length, height, 0.1]} />
   
         {/* Front Wall */}
         <Box position={[0, 0 - 0.3, halfwidth]} args={[length, height, 0.1]} />
   
         {/* Left Wall */}
         <Box position={[-halfLength , 0 -0.3, 0]} args={[0.1, height, width]} />
   
         {/* Right Wall */}
         <Box position={[halfLength, 0 - 0.3, 0]} args={[0.1, height, width]} />
   
         {/* Floor */}
         <Box position={[0, -height / 2 - 0.3, 0]} args={[length, 0.1, width]} material-color={floorColor} />
       
       </>
   
     );
   };
   
   export default EntireRoom;
   
   
   
   import React from 'react';
import { Box } from '@react-three/drei';

const Room = ({ position, length, width, height = 5 }) => {

  const halfLength = length / 2;
  const halfWidth = width / 2;
  const color = 'black'

  const [x, y, z] = position;

  return (
    <>
      {/* Back Wall */}
      <Box position={[x+halfLength, y, z ]} args={[length, height, 0.1]} material-color={color} />

      {/* Front Wall */}
      <Box position={[x+halfLength, y, z + width]} args={[length, height, 0.1]} material-color={color} />

      {/* Left Wall */}
      {/* <Box position={[x, y, z+halfWidth ]} args={[0.1, height, width]} material-color={color} /> */}

      {/* Right Wall */}
      <Box position={[x+length, y, z+halfWidth ]} args={[0.1, height, width]} material-color={color} />
    </>
  );
};

export default Room;

   

import React from 'react';
import WarehouseRack from './WarehouseRack';

// aisle: "A01"
// aisleText: "B09"
// bayCnt: 6
// positionX1: 630
// positionY1: 525
// rowCnt: 30
// rowWidth: 10
// rowheight: 12
// tierCnt: 4


const Aisle = ({ aisleId, bayCnt, position, rowCnt, rowwidth, rowLength = 25, rowHeight, tierCnt }) => {
    
  const [x, y, z] = position;
  const shelfThickness = 0.1;

  
  const rackPositions = Array.from({ length: rowCnt  }, (_, index) => {
    const rackZ = z + index * (rowwidth + shelfThickness*0.2 )  ;
    return [x, y, rackZ];
  });


  return (
    <>
      {rackPositions.map((rackPosition,index) => (
        <WarehouseRack 
          key={`aisle_${aisleId}_rack${index}`}
          position={rackPosition}
          numShelves={tierCnt} 
          height={rowHeight}
          width={rowLength}
          length={rowwidth}
          bayCnt = {bayCnt}
        />
      ))}
    </>
  );
};

export default Aisle;


   
   

import React from 'react';
import { Box , Text} from '@react-three/drei';

const WarehouseRack = ({ position, height ,width , length, numShelves}) => {

  const [x, y, z] = position;

  position = [x+length/2,y,z+width/2]

  height = 30;
  

  const shelfWidth = width; 
  const rackLength = length;
  const shelfThickness = 0.1;
  const rackPartition = 0.1 ;
  const brownColor = '#8B4513'; 
  const metalColor = '#F1EF99'; 
  const sideColor = '#996633'; 
  const backColor = '#663300'; 





  const shelfPositions = [
    { side: "left", position: [0, 0, -rackLength/2], args: [shelfWidth -0.05, height, rackPartition] , color : sideColor },
    { side: "right", position: [0, 0, rackLength/2] , args: [shelfWidth -0.05, height, rackPartition], color : sideColor },
    { side: "center", position: [0, 0, 0] , args: [shelfThickness, height, rackLength], color : brownColor },
    { side: 'topShelf', position: [0, height/2, 0], args: [shelfWidth , shelfThickness, rackLength], color: backColor },
    { side: 'bottomShelf',position: [0, -height / 2, 0], args: [shelfWidth , 0.2, rackLength], color: backColor }

  ];


  const startRange = -height/2;
  const endRange = height/2;
  const numPoints = numShelves+1;

  const resultArray = Array.from({ length: numPoints }, (_, index) => startRange + index * ((endRange - startRange) / (numPoints - 1)));


  for (let i = 1; i < numShelves; i++) {
    shelfPositions.push({
      position: [0, resultArray[i], 0],  
      args: [shelfWidth-0.1, shelfThickness, rackLength],
      side: `Shelf ${i + 1}`,
      color: metalColor
    });
  }

  return (
    <group position={position} >
      {shelfPositions.map((shelf) => (
        <Box key={shelf.side} position={shelf.position} args={shelf.args}>
          <meshStandardMaterial color={shelf.color} />
        </Box>
      ))}
      {/* <Text position={[0, height / 2 + 1, -0.2]} 
            fontSize={1} anchorX="center" anchorY="middle" material-color="white" >
        {`X: ${position[0].toFixed(2)}, Y: ${position[1].toFixed(2)}, Z: ${position[2].toFixed(2)}`}
      </Text> */}

    </group>
  );

};

export default WarehouseRack;



   
   
   
   
  
  


